* Config/Preamble :noexport:

** Header
#+title: Optimized GPU-Based Matrix Inversion
#+SUBTITLE: Though The Use of Thread-Data Remapping
#+AUTHOR: Samuel J Monson
#+EMAIL: monsonsamuel@seattleu.edu
#+DATE: 2024-05-31
#+BEAMER_HEADER: \institute{Seattle Univerisity}
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:2 ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [aspectratio=169,t]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

#+CITE_EXPORT: biblatex ieee
#+BIBLIOGRAPHY: sources.bib

** Emacs Config
#+startup: beamer show2levels

#+BEGIN_SRC emacs-lisp :exports none :eval always
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))

  ;; Title page fix
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat
     "\\begin{frame}\n"
     "\\maketitle\n"
     "\\end{frame}\n"
  ))
  ;; Use minted for code highlighting
  (setq org-latex-src-block-backend 'minted)
  ;; Don't add <center> tags to images I like to do that myself
  (setq org-latex-images-centered nil)
  ;; export snippet translations (e.g. @@b:\tex@@)
  (add-to-list 'org-export-snippet-translation-alist
             '("b" . "beamer"))
#+end_src

** LaTeX Config

*** Set Beamer Theme

#+BEAMER_THEME: focus
#+BEAMER_HEADER: \definecolor{main}{HTML}{93361f}
#+BEAMER_HEADER: \definecolor{background}{HTML}{D0D0D0}
#+BEAMER_HEADER: \definecolor{royalblue}{HTML}{4169e1}
#+BEAMER_HEADER: \definecolor{forestgreen}{HTML}{228b22}

*** Use Listings instead of verbatim

#+LATEX_HEADER: \usepackage{minted}

*** Fix Captions

#+LATEX_HEADER: \usepackage{ccicons}
#+LATEX_HEADER: \usepackage[margin=3pt,font=scriptsize,labelfont=bf]{caption}

*** SVG Support

#+LATEX_HEADER: \usepackage{svg}

Make SVGs support overlays
#+LATEX_HEADER: \renewcommand<>{\includesvg}[2][]{\only#3{\beameroriginal\includesvg[#1]{#2}}}

*** Define abs

#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \DeclarePairedDelimiter\abs{\lvert}{\rvert} % ABS: abs{}

*** Configure fonts

#+BEAMER_HEADER: \setmathfont{Fira Math}
#+BEAMER_HEADER: \setmathfont{TeX Gyre DejaVu Math}[range={\vysmwhtcircle,\times,\vdots,\star}]
/#+BEAMER_HEADER: \setmonofont{Hack}

*** Citations

Show back-references to in-text citations
#+LATEX_HEADER: \usepackage[backref=true]{biblatex}

Make in-text citations smaller
#+LATEX_HEADER_EXTRA: \renewcommand*{\citesetup}{\biburlsetup\small\frenchspacing}

*** Environments

Separated Matrices
#+LATEX_HEADER: \usepackage{nicematrix}

Angled Small Vector
#+LATEX_HEADER: \newenvironment{asvector}{\left\langle\begin{smallmatrix}}{\end{smallmatrix}\right\rangle}

Angled Vector
#+LATEX_HEADER: \newenvironment{avector}{\left\langle\begin{matrix}}{\end{matrix}\right\rangle}

Tight Align
#+LATEX_HEADER: \newenvironment{talign*}{\centering $\displaystyle\begin{aligned}}{\end{aligned}$\par}

* Introduction to Inverses

** What Is An Inverse?

*** Inverse
:PROPERTIES:
    :BEAMER_env: definition
:END:

The _inverse_ of $a$ is some value $a^{-1}$ such that $a \star a^{-1} = \symbfit{i}$ where $\symbfit{i}$ is the identity of $\star$.

*** Identity
:PROPERTIES:
    :BEAMER_env: definition
    :BEAMER_act: <2->
:END:

The _identity_ of an operation $\star$ and set $G$ is some value $\symbfit{i} \in G$ where for all $a \in G$, $\symbfit{i} \star a = a \star \symbfit{i} = a$.

*** The Rest
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+ATTR_BEAMER: :overlay <3->
- For example, the set and operation $(\symbb{R}, \times)$ has the identity $\symbfit{i} = 1$ since $1 \times x = x \times 1 = x$ for all $x \in \symbb{R}$.
- Thus the inverse of $a$ is $\frac{1}{a}$ since $a \times a^{-1} = 1 \to a = \frac{1}{a}$.
  - Note that this is only true because $a \times b = b \times a$ for all $a,b \in \symbb{R}$.

** Matrix Inverse

*** Problem

- Matrix multiplication is generally not commutative ($AB \neq BA$).

*** The Rest
:PROPERTIES:
    :BEAMER_env: ignoreheading
:END:

** Uses

\begin{align*}
    3x  + 2y & = 2 \\
    -7x - 5y & = 4 \\
    \begin{bmatrix} 3 & 2 \\ -7 & -5 \end{bmatrix}
    \begin{bmatrix} x \\ y \end{bmatrix}
    & = \begin{bmatrix} 2 \\ 4 \end{bmatrix} \\
    \begin{bmatrix} 3 & 2 \\ -7 & -5 \end{bmatrix}^{-1}
    \begin{bmatrix} 3 & 2 \\ -7 & -5 \end{bmatrix}
    \begin{bmatrix} x \\ y \end{bmatrix}
    & = \begin{bmatrix} 3 & 2 \\ -7 & -5 \end{bmatrix}^{-1}
    \begin{bmatrix} 2 \\ 4 \end{bmatrix} \\
    \symbf{I}_2
    \begin{bmatrix} x \\ y \end{bmatrix}
    & = \begin{bmatrix} 5 & 2 \\ -7 & -3 \end{bmatrix}
    \begin{bmatrix} 2 \\ 4 \end{bmatrix} \\
    \begin{bmatrix} x \\ y \end{bmatrix}
    & = \begin{bmatrix} 18 \\ -26 \end{bmatrix} \\
\end{align*}

* Methods of Matrix Inversion

** General Definition

*** Matrix Inverse
:PROPERTIES:
    :BEAMER_env: definition
:END:

$A^{-1} = \frac{1}{\det(A)} \text{adj}(A)$

*** The Rest
:PROPERTIES:
    :BEAMER_env: ignoreheading
:END:

- If $\det(A)$ then the inverse is undefined.

** Gauss-Jordan Method

*** Operations

1. Swap any two rows: $swap(R_i, R_j)$
2. Multiply any row by a non-zero value: $c \times R_i$
3. Add to any row a multiple of another row: $R_i + c \times R_j$

* Class Activity

** Matrix Example

\begin{align*}
    M & = \begin{bmatrix} 1 & 0 & 1 \\ 0 & 2 & 1 \\ 1 & 1 & 1 \end{bmatrix} \\
\end{align*}

** Solution

\begin{align*}
    \begin{bNiceArray}{ccc|ccc}
        1 & 0 & 1 & 1 & 0 & 0 \\
        0 & 2 & 1 & 0 & 1 & 0 \\
        1 & 1 & 1 & 0 & 0 & 1
    \end{bNiceArray}
    & \xrightarrow{R_0 / 1} &
    \begin{bNiceArray}{ccc|ccc}
        \symbf{1} & \symbf{0} & \symbf{1} & \symbf{1} & \symbf{0} & \symbf{0} \\
        0 & 2 & 1 & 0 & 1 & 0 \\
        1 & 1 & 1 & 0 & 0 & 1
    \end{bNiceArray}
    & \xrightarrow[R_2 - 1 R_0]{R_1 - 0R_0} &
    \begin{bNiceArray}{ccc|ccc}
        1 & 0 & 1 & 1 & 0 & 0 \\
        \symbf{0} & \symbf{2} & \symbf{1} & \symbf{0} & \symbf{1} & \symbf{0} \\
        \symbf{0} & \symbf{1} & \symbf{0} & \symbf{-1} & \symbf{0} & \symbf{1}
    \end{bNiceArray} \\
    & \xrightarrow{R_1 / 2} &
    \begin{bNiceArray}{ccc|ccc}
        1 & 0 & 1 & 1 & 0 & 0 \\
        \symbf{0} & \symbf{1} & \symbf{\frac{1}{2}} & \symbf{0} & \symbf{\frac{1}{2}} & \symbf{0} \\
        0 & 1 & 0 & -1 & 0 & 1
    \end{bNiceArray}
    & \xrightarrow[R_2 - 1 R_1]{R_0 - 0R_1} &
    \begin{bNiceArray}{ccc|ccc}
        \symbf{1} & \symbf{0} & \symbf{1} & \symbf{1} & \symbf{0} & \symbf{0} \\
        0 & 1 & \frac{1}{2} & 0 & \frac{1}{2} & 0 \\
        \symbf{0} & \symbf{0} & \symbf{-\frac{1}{2}} & -\symbf{1} & \symbf{-\frac{1}{2}} & \symbf{1}
    \end{bNiceArray} \\
    & \xrightarrow{R_2 / -\frac{1}{2}} &
    \begin{bNiceArray}{ccc|ccc}
        1 & 0 & 1 & 1 & 0 & 0 \\
        0 & 1 & \frac{1}{2} & 0 & \frac{1}{2} & 0 \\
        \symbf{0} & \symbf{0} & \symbf{1} & \symbf{2} & \symbf{1} & \symbf{-2}
    \end{bNiceArray}
    & \xrightarrow[R_1 - \frac{1}{2} R_2]{R_0 - 1R_2} &
    \begin{bNiceArray}{ccc|ccc}
        \symbf{1} & \symbf{0} & \symbf{0} & \symbf{-1} & \symbf{-1} & \symbf{2} \\
        \symbf{0} & \symbf{1} & \symbf{0} & \symbf{-1} & \symbf{0} & \symbf{1} \\
        0 & 0 & 1 & 2 & 1 & -2
    \end{bNiceArray}
\end{align*}

* GPU Programming

** CPU Architecture

*** Diagram
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+ATTR_LATEX: :height 0.70\textheight
[[./Figs/CPU.drawio.svg]]
#+ATTR_BEAMER: :overlay <2>
#+ATTR_LATEX: :height 0.70\textheight
[[./Figs/CPU_core_layout.drawio.svg]]
#+ATTR_BEAMER: :overlay <3>
#+ATTR_LATEX: :height 0.70\textheight
[[./Figs/CPUs_core_layout.drawio.svg]]
#+LATEX: \end{center}

*** Text
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

#+ATTR_BEAMER: :overlay <only@1>
- Core
  - Processing unit
- L1 L2 L3
  - Caches for storing work
#+ATTR_BEAMER: :overlay <2->
- Registers
  - Store localized data including the fetched instruction
- Control Unit (CU)
  - Decodes instruction and sends to appropriate logic unit
- Arithmetic Logic Unit (ALU) / Floating Point Unit (FPU)
  - Executes given instruction
#+ATTR_BEAMER: :overlay <3->
- Each core has its own registers and control logic

** SIMT Architecture

*** Diagram
:PROPERTIES:
    :BEAMER_col: 0.60
:END:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+ATTR_LATEX: :height 0.65\textheight
[[./Figs/gpu_overview_high.svg]]
#+ATTR_BEAMER: :overlay <2>
#+ATTR_LATEX: :height 0.65\textheight
[[./Figs/gpu_overview.svg]]
#+ATTR_BEAMER: :overlay <3>
#+ATTR_LATEX: :height 0.65\textheight
[[./Figs/gpu_proc_overview.svg]]
#+LATEX: \end{center}

*** Text
:PROPERTIES:
    :BEAMER_col: 0.40
:END:

#+ATTR_BEAMER: :overlay <only@1-2>
- Multiprocessor (MP)
  - A "core" that handles simultaneous execution of a vector of tasks
#+ATTR_BEAMER: :overlay <only@2>
- Scalar processor (SP)
  - Executes a single scalar component
#+ATTR_BEAMER: :overlay <3->
- Warp
  - Group of SPs in a MP that execute in lockstep
  - Warps share registers; including the program counter
- Kernel
  - Group of warps that operate on the same method

** Basic CUDA Program
*** Code
:PROPERTIES:
    :BEAMER_col: 0.55
:END:

#+ATTR_LATEX: :options fontsize=\footnotesize,linenos=true,xleftmargin=0.5cm
#+BEGIN_SRC cuda
// A special method invoked by the
// CPU to launch a GPU kernel
__global__ print(string message) {
    int idx = threadIdx.x;
    int jdx = blockIdx.x;
    printf("%s from (%d, %d)\n",
           message, jdx, idx);
}

// Standard C main
int main() {
    // Call kernel launcher
    print<<<2, 4>>>("Hello World");
    // Wait for GPU to finish
    cudaDeviceSynchronize();
}
#+END_SRC

*** Output
:PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
:END:

Hello World from (0, 0)

Hello World from (0, 3)

Hello World from (1, 2)

Hello World from (1, 0)

Hello World from (0, 2)

Hello World from (1, 1)

Hello World from (1, 3)

Hello World from (0, 1)

** Thread-Data Remapping

* Results

** Results

* Conclusion
:PROPERTIES:
    :BEAMER_env: ignoreheading
:END:

** References
:PROPERTIES:
    :BEAMER_opt: allowframebreaks,label=
 :END:

#+LATEX: \setlength\bibitemsep{0.5\baselineskip}
#+LATEX: \nocite{*} % Use all citations
#+print_bibliography:
